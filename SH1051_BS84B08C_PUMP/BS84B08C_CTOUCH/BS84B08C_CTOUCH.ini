
;;;;;///*********************************************************************************************************//**
;;;;;// * @file    BS84B08C_CTOUCH.INI
;;;;;// * @version V1.00
;;;;;// * @date    11/13/2020
;;;;;// * @brief   The header file of the BS84B08C_CTOUCH library.
;;;;;// *************************************************************************************************************
;;;;;// * @attention
;;;;;// * <h2><center>Copyright (C) Best Solution Inc. All rights reserved</center></h2>
;;;;;// ************************************************************************************************************/


;;;;;///** @addtogroup CALCULATE_POSITION
;;;;;//  * @{
;;;;;//  */
;;;;;///* ---------------------------------------------------------------------------------------------------------*/
;;;;;///* Exported constants --------------------------------------------------------------------------------------*/
;;;;;///* ---------------------------------------------------------------------------------------------------------*/
;;;;;///** @defgroup BS84B08C option constants
;;;;;//  * @{
;;;;;//  */
;;;;;///**
;;;;;//  * @}
;;;;;//  */
;;;;;///* ---------------------------------------------------------------------------------------------------------*/
;;;;;//
;;;;;///* Option ------------------------------------------------------------------------------------------------*/

;**********INI_DEF_OPTION.asm**********


        #define KeyAmount                   TouchKeyAmount
        #define ReadKeyBitmap               1         ;;;;;//1=open 0=close
        #define ReadFREQ                    1         ;;;;;//1=open 0=close
        #define ReadREF                     1         ;;;;;//1=open 0=close
        #define ReadRCC                     1         ;;;;;//1=open 0=close
        #define ReadVER                     1         ;;;;;//1=open 0=close
            
        #define AutoCheckTouchIO            0         ;;;;;//1=open 0=close
;;;;;//=========================================================================
;;;;;//OPTION
#define NormalSensSampling          (1024+1024)    ;;;;;//CTOUCH_V511,TKM_Reset
#define HighSensSampling            (2048+1024)    ;;;;;//CTOUCH_V511,TKM_Reset
;;;;;//=========================================================================
#define LowUnBalanceOffset          26             ;;;;;//TKS_Filter
#define HighUnBalanceOffset         32             ;;;;;//TKS_Filter
;;;;;//=========================================================================
#define PowerSaveSamplingLength     2              ;;;;;//0;3=normal 1=div2 2=div4
#define DEFAULT_STANDBY_TIME        8000           ;;;;;//8 Sec

;;;;;//#define HALT_CALIBRATE_TIME        00000000B      ;;;;;//1 time
;;;;;//#define HALT_CALIBRATE_TIME        00000001B      ;;;;;//2 times
;;;;;//#define HALT_CALIBRATE_TIME        00000011B      ;;;;;//4 times
;;;;;//#define HALT_CALIBRATE_TIME        00000111B      ;;;;;//8 times
#define HALT_CALIBRATE_TIME         00001111B      ;;;;;//16 times   
                                                   ;;;;;//base on WDT time
;;;;;//=========================================================================
;;;;;/* ==================================================================================================================================================*/


;;;;;/*

ifndef CTOUCH_V512_DEF
;//--------------------------------
;//-TOUCH KEY LIBRARY VARIES DEFINE
;//--------------------------------
;//-numeric operate ;// range 0 ~ 15;//
#define DebounceTimes           2

;//-numeric operate ;// range 0 ~ 15;// function: Time period to calibrate
#define AutoCalibrationPeriod   7       ;//auto calibration period select 0=80ms .....15=1280ms

;//-bit operate                   ;// function: Sensitive double up
#define HighSensitive           1       ;//0=Normal ;// 1=High Sensitive

;//-numeric operate ;// range 0 ~ 15;// function: key holding time ,if time out will reset key status to non-press
#define MaximumKeyHoldTime      2       ;//0=disable ;// 1=4 secend ...... 15=60secend

;//-bit operate ;// range 0/1       ;// function: enalbe hardware hopping function
#define AutoFrequencyHopping    1       ;//0=disable ;// 1=enable

;//-bit operate ;// range 0/1       ;// function: only one or all key active at the same time
#define OneKeyActive            1       ;//0=all key active ;// 1=one key active

;//-bit operate ;// range 0/1       ;// function: Low power consumption
#define PowerSave               0     ;//0=disable ;// 1=power save mode

;//-bit operate ;// range 0/1       ;// function: moving calibration signal whatever key press or not
#define MovingCalibration       1       ;//0=calibrate when key non press  ;// 1=enable calibration whatever key press or not

;//-numeric operate ;// range 0 ~ 2 ;// function: Main frequency selection
#define MainFreqSelect          1       ;//0:3M/7M  1:3M/11M 2:3M/1M

;//-Key threshold define
#define Key1Threshold           16     ;//suggestion range 10 ~ 64
#define Key2Threshold           16
#define Key3Threshold           16
#define Key4Threshold           16
;//--
#define Key5Threshold           16
#define Key6Threshold           16
#define Key7Threshold           16
#define Key8Threshold           16
;//--
#define Key9Threshold           16
#define Key10Threshold          16
#define Key11Threshold          16
#define Key12Threshold          16
;//--
#define Key13Threshold          16
#define Key14Threshold          16
#define Key15Threshold          16
#define Key16Threshold          16
;//--
#define Key17Threshold          16
#define Key18Threshold          16
#define Key19Threshold          16
#define Key20Threshold          16
;//---------------------------------
;//-DEFINE PIN AS I/O OR TOUCH INPUT
;//---------------------------------
#define IO_TOUCH_ATTR           00000000000011111111111111111111B;//0=IO ;// 1=TOUCH INPUT
                         ;//KEY 3   ~   2 ~ 2 ~ 1 ~ 1 ~ 0 ~ 0 ~0 ;//KEY32~KEY1
                         ;//    2       4   0   6   2   8   4  1


;//---------------------------------
;//-DEFINE WAKEUP KEY                     
;//---------------------------------
#define WAKEUP_KEY              00000000000011111111111111111111B;//0=DISABLE ; 1=ENABLE
                         ;//KEY 3   ~   2 ~ 2 ~ 1 ~ 1 ~ 0 ~ 0 ~0 ;KEY32~KEY1
                         ;//    2       4   0   6   2   8   4  1

endif

#define  CTOUCH_V512_INI

            PUBLIC  _BS84B08C_CTOUCH_HALT_PREPARE
            PUBLIC  _BS84B08C_CTOUCH_HALT_WAKEUP
            PUBLIC  _BS84B08C_CTOUCH_RETURN_MAIN
            PUBLIC  _GET_ENV_VALUE
            PUBLIC  _GET_REF_VALUE
            PUBLIC  _GET_RCC_VALUE
            PUBLIC  _GET_LIB_VER
            PUBLIC  _GET_KEY_BITMAP
            
            PUBLIC  _LOAD_TKS_GLOBE_VARIES
            PUBLIC  _GetTKTMRSens
            PUBLIC  _GetSampleWindowLimit
            PUBLIC  _CHECK_KEY_ENTER_HALT
            PUBLIC  HALT_SAVE_DATA
            PUBLIC  HALT_SAMPLING
            PUBLIC  _AutoCheckTouchIO
            PUBLIC  _TouchKeyRamReset
            
            EXTERN  _GetSampleWindowLimit_RET   :NEAR


#define _KEY_FREQ               _KEY_REF+1
#define _BALANCE_CAP3M          _BALANCE_CAP
#define BP_BUF                  _DATA_BUF[2]
#define MP_BUF                  _DATA_BUF[3]
#define BalanceCentralPoint     128            ;;;;;//CTOUCH_V501,TKS_Filter,PowerOn_Calibrate,Normal_Calibrate
#define SENS_LEVEL              0
#define TKS_OPTIONA             0
#define TKS_OPTIONB             1
#define TKS_OPTIONC             2
#define SampleWindowLimitA      (NormalSensSampling-BalanceCentralPoint)
#define SampleWindowLimitB      (HighSensSampling-BalanceCentralPoint)

if (NormalSensSampling%64) > 0
    NormalSensSampling setting error
endif
if (HighSensSampling%64) > 0
    HighSensSampling setting error
endif

CTOUCH_INI          .SECTION   'CODE'
;;;;;//---------------------------------------------------------------------------------


_GetTKTMRSens:
                MOV     A,256-(NormalSensSampling>>6)          ;;;;;//SET 1024+1024             ;SET 1024 COUNT
                SZ      _GLOBE_VARIES[TKS_OPTIONB].SENS_LEVEL
                MOV     A,256-(HighSensSampling>>6)            ;;;;;//SET 2048+1024
                MOV     TKTMR,A
                RET
                
_GetSampleWindowLimit:
                MOV     A,HIGH SampleWindowLimitA
                SZ      _GLOBE_VARIES[TKS_OPTIONB].SENS_LEVEL
                MOV     A,HIGH SampleWindowLimitB
                MOV     MP1,A           ;;;;;//TEMP USE MP1 AS BUFFER
                ;;;;;//--
                MOV     A,LOW SampleWindowLimitA
                SZ      _GLOBE_VARIES[TKS_OPTIONB].SENS_LEVEL
                MOV     A,LOW SampleWindowLimitB
                JMP     _GetSampleWindowLimit_RET

                
;;;;;//========================================================================
;;;;;//---------------------------------------------------------------------------------
_LOAD_TKS_GLOBE_VARIES:
;**********LOAD_TKS_GLOBE_VARIES.asm**********
                
                ;;;;;//------------------------
                ;;;;;//-SET TKS LIBRARY OPTION-
                ;;;;;//------------------------
                MOV     A,(AutoCalibrationPeriod<<4)|DebounceTimes
                MOV     _GLOBE_VARIES[0],A
                MOV     A,(MaximumKeyHoldTime<<4)|(MainFreqSelect<<1)|HighSensitive
                MOV     _GLOBE_VARIES[1],A
                MOV     A,(MovingCalibration<<7)|(PowerSave<<6)|(OneKeyActive<<5)|(AutoFrequencyHopping<<3)
                MOV     _GLOBE_VARIES[2],A
TouchKeyRamReset:
                ;;;;;//--------------------------
                ;;;;;//-SET TOUCH OR IO ATTRIBUTE
                ;;;;;//--------------------------
                MOV     A,IO_TOUCH_ATTR&0FFH
                MOV     _KEY_IO_SEL[0],A
                ;;;;;//-IF OVER 2 TOUCH IP (8~16KEY)
                if      TouchKeyAmount > 8
                MOV     A,(IO_TOUCH_ATTR>>8)&0FFH
                MOV     _KEY_IO_SEL[1],A
                endif
                ;;;;;//-IF OVER 4 TOUCH IP (17~24KEY)
                if      TouchKeyAmount > 16
                MOV     A,(IO_TOUCH_ATTR>>16)&0FFH
                MOV     _KEY_IO_SEL[2],A
                endif
                ;;;;;//-IF OVER 6 TOUCH IP (25~32KEY)
                if      TouchKeyAmount > 24
                MOV     A,(IO_TOUCH_ATTR>>24)&0FFH
                MOV     _KEY_IO_SEL[3],A
                endif
                ;;;;;//-IF OVER 8 TOUCH IP (33~40KEY)
                if      TouchKeyAmount > 32
                MOV     A,IO_TOUCH_ATTR2
                MOV     _KEY_IO_SEL[4],A
                endif
                
SET_KEY_THR  MACRO  KeyNum,KeyThr
    if      TouchKeyAmount > (KeyNum-1)
        if (IO_TOUCH_ATTR&(1<<(KeyNum-1)) & (WAKEUP_KEY&(1<<(KeyNum-1)))) > 0
                MOV     A, KeyThr
        else
                MOV     A, KeyThr|080H
        endif
                CALL    __SET_KEY_THR
    endif
            ENDM
                
                
                ;;;;;//------------------------
                ;;;;;//-SET TOUCH KEY THRESHOLD
                ;;;;;//------------------------
                ;;;;;//-KEY1 THRESHOLD
                
                MOV     A,OFFSET _KEY_THR[0]
                MOV     MP1,A
                MOV     A,BANK _KEY_THR[0]
                MOV     BP,A
                
                SET_KEY_THR     1 ,Key1Threshold
                SET_KEY_THR     2 ,Key2Threshold
                SET_KEY_THR     3 ,Key3Threshold
                SET_KEY_THR     4 ,Key4Threshold
                SET_KEY_THR     5 ,Key5Threshold
                SET_KEY_THR     6 ,Key6Threshold
                SET_KEY_THR     7 ,Key7Threshold
                SET_KEY_THR     8 ,Key8Threshold
                SET_KEY_THR     9 ,Key9Threshold
                SET_KEY_THR     10,Key10Threshold
                SET_KEY_THR     11,Key11Threshold
                SET_KEY_THR     12,Key12Threshold
                SET_KEY_THR     13,Key13Threshold
                SET_KEY_THR     14,Key14Threshold
                SET_KEY_THR     15,Key15Threshold
                SET_KEY_THR     16,Key16Threshold
                SET_KEY_THR     17,Key17Threshold
                SET_KEY_THR     18,Key18Threshold
                SET_KEY_THR     19,Key19Threshold
                SET_KEY_THR     20,Key20Threshold
                SET_KEY_THR     21,Key21Threshold
                SET_KEY_THR     22,Key22Threshold
                SET_KEY_THR     23,Key23Threshold
                SET_KEY_THR     24,Key24Threshold
                SET_KEY_THR     25,Key25Threshold
                SET_KEY_THR     26,Key26Threshold
                SET_KEY_THR     27,Key27Threshold
                SET_KEY_THR     28,Key28Threshold
                SET_KEY_THR     29,Key29Threshold
                SET_KEY_THR     30,Key30Threshold
                SET_KEY_THR     31,Key31Threshold
                SET_KEY_THR     32,Key32Threshold
                RET
                
                

__SET_KEY_THR:
                MOV     IAR1,A
                INC     MP1
                RET
                
                
;;;;;//---------------------------------------------------------------------------------

;**********AutoCheckTouchIO.asm**********
_TouchKeyRamReset:
            if AutoCheckTouchIO == 1
                JMP     TouchKeyRamReset
            endif    
                
_AutoCheckTouchIO:
            if AutoCheckTouchIO == 1
                CALL    GET_M3_LIMIT_MPX
                SZ      IAR1
                RET
                INC     MP1
                SZ      IAR1
                RET
                
                CALL    GET_M11_LIMIT_MPX
                SZ      IAR1
                RET
                INC     MP1
                SZ      IAR1
                RET
                
                SZ      BALANCE_BUF[0]
                RET
                SZ      BALANCE_BUF[2]
                RET
                
                CLR     _DATA_BUF[4].0
                SWAPA   CHANNEL_INDEX
                RL      ACC
                AND     A,00011111B
                ADD     A,OFFSET _KEY_IO_SEL
                MOV     MP0,A
                
                MOV     A,01111111B
                MOV     _DATA_BUF[0],A
                INCA    CHANNEL_INDEX
                AND     A,00000111B
                
                RL      _DATA_BUF[0]
                SDZ     ACC
                JMP     $-2
                
                MOV     A,_DATA_BUF[0]
                ANDM    A,IAR0
                
                CALL    GET_KEY_THR_MP1
                MOV     A,80H
                ORM     A,IAR1
            endif    
                RET


if ReadFREQ==0
message 'xReadFREQ'
endif
if ReadREF==0
message 'xReadREF'
endif
if ReadRCC==0
message 'xReadRCC'
endif
if ReadVER==0
message 'xReadVER'
endif

;**********GetXXXForINI.asm**********


;;;;;//***********************************************************
;;;;;//*SUB. NAME:                                               *
;;;;;//*INPUT    :NONE                                           *
;;;;;//*USED REG.:ACC , _DATA_BUF[0] ,_DATA_BUF[1]               *
;;;;;//*USED REG.:                                               *
;;;;;//*FUNCTION :                                               *
;;;;;//***********************************************************
_GET_LIB_VER PROC
        if ReadVER==1
                MOV     A,LOW LibraryVersion
                MOV     _DATA_BUF[0],A
                MOV     A,HIGH LibraryVersion
                MOV     _DATA_BUF[1],A
                RET
        endif
_GET_LIB_VER ENDP 
                
;;;;;//***********************************************************
;;;;;//*SUB. NAME:                                               *
;;;;;//*INPUT    :NONE                                           *
;;;;;//*OUTPUT   :_DATA_BUF[1];_DATA_BUF[0]                      *
;;;;;//*USED REG.:                                               *
;;;;;//*FUNCTION :                                               *
;;;;;//***********************************************************
                        ;;;;;//---------------
_GET_KEY_BITMAP PROC    ;;;;;//-READ KEY LEVEL
                        ;;;;;//---------------
        if ReadKeyBitmap==1
                MOV     A,_KEY_DATA[0]
                MOV     _DATA_BUF[0],A
                ;;;;;//------------------------
        if      KeyAmount > 8
                MOV     A,_KEY_DATA[1]
                MOV     _DATA_BUF[1],A
        endif   ;;;;;//------------------------
        if      KeyAmount > 16
                MOV     A,_KEY_DATA[2]
                MOV     _DATA_BUF[2],A
        endif   ;;;;;//------------------------
                RET
        endif
_GET_KEY_BITMAP ENDP

;;;;;//***********************************************************
;;;;;//*SUB. NAME:                                               *
;;;;;//*INPUT    :ACC                                            *
;;;;;//*OUTPUT   :_DATA_BUF[0],_DATA_BUF[1]                      *
;;;;;//*USED REG.:ACC , _DATA_BUF[0] , MP1 , IAR1 , BP           *
;;;;;//*FUNCTION :GET "RCC" VALUE                                *
;;;;;//***********************************************************
_GET_RCC_VALUE PROC
        if ReadRCC==1
                RLA     ACC
                SET     ACC.7
                MOV     _DATA_BUF[1],A
                MOV     A,OFFSET _BALANCE_CAP3M
                JMP     GET_VALUE
        endif
_GET_RCC_VALUE ENDP
;;;;;//***********************************************************
;;;;;//*SUB. NAME:                                               *
;;;;;//*INPUT    :ACC 0=KEY1 ; 1=KEY2....                        *
;;;;;//*OUTPUT   :_DATA_BUF[1],_DATA_BUF[0]                      *
;;;;;//*USED REG.:ACC,_DATA_BUF[0]~_DATA_BUF[3],MP1,IAR1,BP      *
;;;;;//*FUNCTION :GET "ENV" VALUE                                *
;;;;;//***********************************************************
_GET_ENV_VALUE PROC
        if ReadFREQ==1
                MOV     _DATA_BUF[1],A
                MOV     A,OFFSET _KEY_FREQ
                JMP     GET_VALUE
        endif
_GET_ENV_VALUE ENDP
;;;;;//***********************************************************
;;;;;//*SUB. NAME:                                               *
;;;;;//*INPUT    :ACC 0=KEY1 ; 1=KEY2....                        *
;;;;;//*OUTPUT   :_DATA_BUF[0],_DATA_BUF[1]                      *
;;;;;//*USED REG.:ACC,_DATA_BUF[0]~_DATA_BUF[3],MP1,IAR1,BP      *
;;;;;//*FUNCTION :GET "REF" VALUE                                *
;;;;;//***********************************************************
_GET_REF_VALUE PROC
        if ReadREF==1
                MOV     _DATA_BUF[1],A
                MOV     A,OFFSET _KEY_REF
        endif
        
        if (ReadREF==1 | ReadFREQ==1 | ReadRCC==1)
GET_VALUE:      ;;;;;//-----
                MOV     _DATA_BUF[0],A
                ;;;;;//-PUSH MP1,BP
                MOV     A,MP1
                MOV     MP_BUF,A
                MOV     A,BP
                MOV     BP_BUF,A
                ;;;;;//--
                MOV     A,BANK _KEY_REF
                MOV     BP,A

GET_VALUE_2OFFSET:;;;;;//-OFFSET 2 BYTE
                CLR     C
                RLCA    _DATA_BUF[1]
                ;RL      ACC
                ADD     A,_DATA_BUF[0]
                MOV     MP1,A
                MOV     A,IAR1
                MOV     _DATA_BUF[0],A
                
                SZ      _DATA_BUF[1].7
                JMP     $+3
                CLR     _DATA_BUF[1]
                JMP     POP_MP1_BP
                
                INC     MP1
                MOV     A,IAR1
                MOV     _DATA_BUF[1],A

POP_MP1_BP:     ;;;;;//-POP BP & MP1 CONTENT
                MOV     A,BP_BUF
                MOV     BP,A
                MOV     A,MP_BUF
                MOV     MP1,A
        endif
                RET
                
_GET_REF_VALUE ENDP


;**********CTOUCH_HALT_EXTERN.asm**********
extern _TOUCH_POWER_SAVEF   :BIT

extern  _TKM_RESET          :NEAR
extern  _LOAD_BALCAP        :NEAR
extern  __LOAD_BALCAP       :NEAR   
extern  GET_KEY_THR_MP1     :NEAR
extern  GET_M11_LIMIT_MPX   :NEAR
extern  GET_M3_LIMIT_MPX    :NEAR
extern  GET_KEY_REF_MPX     :NEAR

extern BALANCE_BUF          :BYTE
extern KEY_DBCE             :BYTE
extern TKS_TIMER            :BYTE
extern SAMPLE_TIMES         :BYTE
extern HALT_CAL_TIME        :BYTE
extern KEY_STATE_BUF        :BYTE
extern TKS_STACK            :BYTE
extern CHANNEL_INDEX        :BYTE
extern SENS_CTRL            :BYTE
extern TKM_BUF              :BYTE


MAIN_FREQ_S0        EQU     1
MAIN_FREQ_S1        EQU     2
UNBALANCE_TIMER     EQU     BALANCE_BUF[1]
UNBALANCEF          EQU     SAMPLE_TIMES.7

#define HALT_R1 TKS_TIMER
#define HALT_R2 SAMPLE_TIMES

_BS84B08C_CTOUCH_HALT_WAKEUP_CODE             .SECTION   'CODE'
_BS84B08C_CTOUCH_HALT_WAKEUP:
;**********CTOUCH_HALT_WAKEUP.asm**********

;;***********************************************************
;;*SUB. NAME:                                               *
;;*INPUT    :                                               *
;;*OUTPUT   :                                               *
;;*USED REG.:                                               *
;;*FUNCTION :                                               *
;;***********************************************************
                RET

_CHECK_KEY_ENTER_HALT                           .SECTION   'CODE'
_CHECK_KEY_ENTER_HALT:
;**********CHECK_KEY_ENTER_HALT.asm**********
;;***********************************************************
;;*SUB. NAME:                                               *
;;*INPUT    :                                               *
;;*OUTPUT   :                                               *
;;*USED REG.:                                               *
;;*FUNCTION :                                               *
;;***********************************************************
if PowerSave == 1
                SZ      _TKS_ACTIVEF
                SZ      KEY_STATE_BUF
                JMP     LOAD_STDBY_TIME         ;if(_TKS_ACTIVEF==0 ||KEY_STATE_BUF>0) goto LOAD_STDBY_TIME
                ;-CHECK IF STANDBY TIME OUT     ;
                SZ      _STANDBY_TIME           ;
                JMP     STB_TIME_CDWN           ;if(_STANDBY_TIME>0) goto STB_TIME_CDWN
                CLR     _HALT_STATE.7
                RET   
endif

_BS84B08C_CTOUCH_RETURN_MAIN_CODE             .SECTION   'CODE'
_BS84B08C_CTOUCH_RETURN_MAIN:
;**********CTOUCH_RETURN_MAIN.asm**********
;;***********************************************************
;;*SUB. NAME:                                               *
;;*INPUT    :                                               *
;;*OUTPUT   :                                               *
;;*USED REG.:                                               *
;;*FUNCTION :                                               *
;;***********************************************************
;defined at Key_Halt_Function
;;;;#define HALT_R1 TKS_TIMER
;;;;#define HALT_R2 SAMPLE_TIMES

if PowerSave == 1
_KEY_WAKEUP:
                CLR     TKMF
                SET     TKME
                CALL    _TKM_RESET
                CALL    _LOAD_BALCAP
                CLR     KEY_DBCE
                CLR     HALT_R1         ;TKS_TIMER
                CLR     HALT_R2         ;SAMPLE_TIMES
                CLR     _TKS_TIME_BASE
                
ESC_HALT_MODE:
LOAD_STDBY_TIME:
                ;-----------------
                ;-HALT INHIBIT
                CLR     _HALT_STATE
                ;--
                SZ      _STANDBY_TIME_CTRL
                JMP     LOAD_NEW_STBT
                MOV     A,DEFAULT_STANDBY_TIME/63
                MOV     _STANDBY_TIME,A
                RET

STB_TIME_CDWN:  ;STANDBY_TIME COUNT DOWN
                ;-HALT INHIBIT
                CLR     _HALT_STATE
                ;--
                SET     HALT_CAL_TIME
                ;--
                SZ      _TKS_63MSF
                DEC     _STANDBY_TIME
                ;-IF NEW STANDBY_TIME SAT.
                SNZ     _STANDBY_TIME_CTRL.7
                RET
LOAD_NEW_STBT:  ;-RELOAD NEW STANDBY TIME
                CLR     _STANDBY_TIME_CTRL.7
                MOV     A,_STANDBY_TIME_CTRL
                MOV     _STANDBY_TIME,A
                RET                             ;DON'T ENTRY HALT
endif
        

_BS84B08C_CTOUCH_HALT_PREPARE_CODE             .SECTION   'CODE'
_BS84B08C_CTOUCH_HALT_PREPARE:
;**********CTOUCH_HALT_PREPARE.asm**********
if PowerSave == 1;
;;***********************************************************
;;*SUB. NAME:                                               *
;;*INPUT    :                                               *
;;*OUTPUT   :                                               *
;;*USED REG.:                                               *
;;*FUNCTION :                                               *
;;***********************************************************
#define KEY_COUNTER                 TKS_STACK[0]
#define CHANNEL_INDEX_BUF           TKS_STACK[1]
;;;;;#define HALT_R3 TKS_TIMERB

                SZ      _STANDBY_TIME
                JMP     KEY_WAKEUP
                
                CLR     TouchTimeBase_INT_Enable             ;STOP TIME BASE COUNTING
                CLR     TKME
                CLR     TKMF
                
        SET _TOUCH_POWER_SAVEF
                INC     HALT_CAL_TIME
                SET     HALT_R2
                
                MOV     A,(HALT_CALIBRATE_TIME<<4)|00001111B    ;;;;;//8mS
                SZ      WDTC.0
                MOV     A,(HALT_CALIBRATE_TIME<<2)|00000011B    ;;;;;//32mS
                SZ      WDTC.1
                MOV     A,HALT_CALIBRATE_TIME                   ;;;;;//128mS,512mS
                
                AND     A,HALT_CAL_TIME
                SZ      Z
                CLR     HALT_R2
                
                CALL    _TKM_RESET
                ;------------------------
                ; S1  S0
                ;  0   0   7M
                ;  0   1  11M
                ;  1   0   3M
                ;------------------------
                ;;;;20191209 tony
                MOV     A,256-((NormalSensSampling>>PowerSaveSamplingLength)/64)  
                SZ      _GLOBE_VARIES[TKS_OPTIONB].SENS_LEVEL
                MOV     A,256-((HighSensSampling>>PowerSaveSamplingLength)/64)  
                _MOVRA  TKTMR
                
        ;===============================================================================
        HALT_SAMPLEING:
            if TOUCH_HW_VERSION == V4G5
                _CLR    TKM0C2
			else
                MOV     A,00111111B
                _ANDM   TKM0C0
			endif
                
                CLR     CHANNEL_INDEX_BUF
                CLR     UNBALANCEF
                
        HALT_SAMPLEING_LOOP:
        
        MOV A,HALT_CAL_TIME    
        MOV KEY_COUNTER,A
        
        HALT_CHECK_WAKEUP_LOOP:
                CLR     KEY_DBCE
                MOV     A,CHANNEL_INDEX_BUF
                MOV     CHANNEL_INDEX,A
                MOV     SENS_CTRL,A
                
                CALL    GET_KEY_THR_MP1
                
                MOV     A,4
                CLR     HALT_R1
                
                SNZ     IAR1.7
                SET     HALT_R1.0
                
        if      KeyAmount > 4           ;KEY 5 ~ 8
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.1
        endif
        if      KeyAmount > 8           ;KEY 9 ~ 12
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.2
        endif
        if      KeyAmount > 12           ;KEY 13 ~ 16
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.3
        endif
        if      KeyAmount > 16           ;KEY 17 ~ 20
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.4
        endif
        if      KeyAmount > 20           ;KEY 21 ~ 24
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.5
        endif
        if      KeyAmount > 24           ;KEY 25 ~ 28
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.6
        endif
        if      KeyAmount > 28           ;KEY 29 ~ 32
                ADDM    A,MP1
                SNZ     IAR1.7
                SET     HALT_R1.7
        endif
                SZ      HALT_R1
                JMP     $+2
                JMP     HALT_SEL_NEXT_KEY

;mov a,0      
;snz tkc1.1
        HALT_SAMPLEING_2_TIMES:
                _CLR    TKC0            ;;;;20191209 tony
                ;;;;20200114 tony
                ;==
                MOV     A,1             ;3M
                SNZ     KEY_COUNTER.0
                JMP     $+6
                MOV     A,2             ;7M
                SZ      _GLOBE_VARIES[TKS_OPTIONB].MAIN_FREQ_S0
                MOV     A,3             ;11M
                SZ      _GLOBE_VARIES[TKS_OPTIONB].MAIN_FREQ_S1
                MOV     A,0             ;1M
                _MOVRA  TKC1
                ;==
                
                
                MOV     A,00110000B     ;-TURN ON KEY/REF. OSC.
                SZ      HALT_R1.0
                _ORM    TKM0C1
        if      KeyAmount > 4           ;KEY 5 ~ 8
                SZ      HALT_R1.1
                _ORM    TKM1C1
        endif
        if      KeyAmount > 8           ;KEY 9 ~ 12
                SZ      HALT_R1.2
                _ORM    TKM2C1
        endif
        if      KeyAmount > 12           ;KEY 13 ~ 16
                SZ      HALT_R1.3
                _ORM    TKM3C1
        endif
        if      KeyAmount > 16           ;KEY 17 ~ 20
                SZ      HALT_R1.4
                _ORM    TKM4C1
        endif
        if      KeyAmount > 20           ;KEY 21 ~ 24
                SZ      HALT_R1.5
                _ORM    TKM5C1
        endif
        if      KeyAmount > 24           ;KEY 25 ~ 28
                SZ      HALT_R1.6
                _ORM    TKM6C1
        endif
        if      KeyAmount > 28           ;KEY 29 ~ 32
                SZ      HALT_R1.7
                _ORM    TKM7C1
        endif



            if TOUCH_HW_VERSION == V4G5
                _RRA    TKM0C2
                RR      ACC
                
                CLR     SENS_CTRL
                RLCA    ACC
                RLC     SENS_CTRL
                RLCA    ACC
                RLC     SENS_CTRL
			else
                CLR     SENS_CTRL
                _RLCA   TKM0C0
                RLC     SENS_CTRL
                RLCA    ACC
                RLC     SENS_CTRL
			endif
                
                
                SZ      _GLOBE_VARIES[TKS_OPTIONB].MAIN_FREQ_S1
                _SNZ     TKC1,0
                _SZ      TKC1,1
                SET     SENS_CTRL.2
                
                
                CALL    __LOAD_BALCAP  
                
                INC     KEY_COUNTER
                
                SZ      HALT_CAL_TIME
                JMP     READ_TKMx16D
                
                _DECA   TKC1   
                SZ      Z
                JMP     HALT_SAMPLEING_2_TIMES ;TKC1 != 3M
;snz tkc1.1


                READ_TKMx16D:
                        SNZ     HALT_R1.0
                        JMP     $+3
                        
                        MOV     A,CHANNEL_INDEX_BUF
                        CALL    HALT_UPDATA_FREQ
                        ;------------------------
                if      KeyAmount > 4           ;KEY 5 ~ 8
                        SNZ     HALT_R1.1
                        JMP     $+4
                        
                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*1
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
                if      KeyAmount > 8           ;KEY 9 ~ 12
                        SNZ     HALT_R1.2
                        JMP     $+4
                        
                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*2
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
                if      KeyAmount > 12          ;KEY 13~ 16
                        SNZ     HALT_R1.3
                        JMP     $+4

                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*3
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
                if      KeyAmount > 16          ;KEY 17~ 20
                        SNZ     HALT_R1.4
                        JMP     $+4

                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*4
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
                if      KeyAmount > 20          ;KEY 21~ 24
                        SNZ     HALT_R1.5
                        JMP     $+4

                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*5
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
                if      KeyAmount > 24          ;KEY 25~ 28
                        SNZ     HALT_R1.6
                        JMP     $+4

                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*6
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
                if      KeyAmount > 28          ;KEY 29~ 32
                        SNZ     HALT_R1.7
                        JMP     $+4

                        MOV     A,CHANNEL_INDEX_BUF
                        ADD     A,4*7
                        CALL    HALT_UPDATA_FREQ
                endif   ;------------------------
        HALT_SEL_NEXT_KEY:
                INCA    KEY_DBCE
                SZ      Z
                JMP     KEY_WAKEUP
                SZ      KEY_DBCE
                JMP     HALT_CHECK_WAKEUP_LOOP

                INC    CHANNEL_INDEX_BUF
                
                
if TOUCH_HW_VERSION == V4G5
                MOV    A,00000001B
                _ADDM  TKM0C2
                ;------------------------
        if      KeyAmount > 4           ;KEY 5 ~ 8
                _ADDM  TKM1C2
        endif   ;------------------------
        if      KeyAmount > 8           ;KEY 9 ~ 12
                _ADDM  TKM2C2
        endif   ;------------------------
        if      KeyAmount > 12          ;KEY 13~ 16
                _ADDM  TKM3C2
        endif   ;------------------------
        if      KeyAmount > 16          ;KEY 17~ 20
                _ADDM  TKM4C2
        endif   ;------------------------
        if      KeyAmount > 20          ;KEY 21~ 24
                _ADDM  TKM5C2
        endif   ;------------------------
        if      KeyAmount > 24          ;KEY 25~ 28
                _ADDM  TKM6C2
        endif   ;------------------------
        if      KeyAmount > 28          ;KEY 29~ 32
                _ADDM  TKM7C2
        endif   ;------------------------
                _SNZ    TKM0C2,2
                JMP     HALT_SAMPLEING_LOOP
else
			
                MOV    A,01000000B
                _ADDM  TKM0C0
                ;------------------------
        if      KeyAmount > 4           ;KEY 5 ~ 8
                _ADDM  TKM1C0
        endif   ;------------------------
        if      KeyAmount > 8           ;KEY 9 ~ 12
                _ADDM  TKM2C0
        endif   ;------------------------
        if      KeyAmount > 12          ;KEY 13~ 16
                _ADDM  TKM3C0
        endif   ;------------------------
        if      KeyAmount > 16          ;KEY 17~ 20
                _ADDM  TKM4C0
        endif   ;------------------------
        if      KeyAmount > 20          ;KEY 21~ 24
                _ADDM  TKM5C0
        endif   ;------------------------
        if      KeyAmount > 24          ;KEY 25~ 28
                _ADDM  TKM6C0
        endif   ;------------------------
        if      KeyAmount > 28          ;KEY 29~ 32
                _ADDM  TKM7C0
        endif   ;------------------------
                SNZ     C
                JMP     HALT_SAMPLEING_LOOP
			    
endif
                
                
        ;===============================================================================
     

        ;===============================================================================
                SNZ     UNBALANCEF
                JMP     KEY_HALT
                INC     UNBALANCE_TIMER
                
                ;check 2S
                MOV     A,2000/128  ;unit 128ms
                SZ      _GLOBE_VARIES[TKS_OPTIONC].6
                MOV     A,2000/512  ;unit 512ms
                SUB     A,UNBALANCE_TIMER
                SNZ     C
                JMP     _LIBRARY_RESET
                ;RET
                JMP     KEY_HALT
        ;===============================================================================

HALT_UPDATA_FREQ:
                MOV     CHANNEL_INDEX,A
                
                CALL    GET_KEY_THR_MP1
                
                CALL    GET_M11_LIMIT_MPX
                MOV     _DATA_BUF[4],A
                CALL    GET_M3_LIMIT_MPX
                SUB     A,_DATA_BUF[4]
                SNZ     C
                ADDM    A,_DATA_BUF[4]  ;GET MIN
                
       CHECK_LOWER_DATA_END:     
                CALL    GET_KEY_REF_MPX
                MOV     _DATA_BUF[5],A
                MOV     A,_DATA_BUF[4]  ;FREQ=REF=ACC=_DATA_BUF[4]
                SZ      HALT_CAL_TIME
                JMP     SLEEP_OTHER_TIME
        SLEEP_FIRST_TIME:
                MOV     IAR1,A          ;
                INC     MP1             ;FREQ
                MOV     IAR1,A          ;
                JMP     SLEEP_RESET_COUNT
        SLEEP_OTHER_TIME:
                INC     MP1             ;FREQ
                ;MOV     A,_DATA_BUF[4]
                ADDM    A,IAR1          ;;;;;1/2 IIR
                RRC     IAR1            ;;;;;

                ;;;;DEC     MP1             ;REF
                MOV     A,_DATA_BUF[5]
                ;;;;INC     MP1             ;FREQ
                SUB     A,IAR1
                SZ      Z
                JMP     SLEEP_KEY_RELEASE
                SNZ     C
                JMP     $+5
                SUBM    A,TBLP
                SZ      C
                JMP     SLEEP_KEY_PRESS
                JMP     SLEEP_KEY_RELEASE
                
                ADDM    A,TBLP
                SNZ     C
                JMP     SLEEP_KEY_PRESS
        SLEEP_KEY_RELEASE:
                ;==tony 20191218
                MOV     A,IAR1     ;
                SUB     A,128-64        ;
                SZ      C               ;_KEY_FREQ < 64, C=0 then UNBALANCEF = 1
                SZ      ACC.7           ;_KEY_FREQ-64>128 then UNBALANCEF = 1
                SET     UNBALANCEF      ;

        SLEEP_UPDATE_REF:
                SZ      HALT_R2
                JMP     SLEEP_RESET_COUNT

                MOV     A,IAR1
                DEC     MP1             ;REF
                ADDM    A,IAR1
                RRC     IAR1
        
        SLEEP_RESET_COUNT:
                CLR     _DATA_BUF[5]
                JMP     $+2                
        SLEEP_KEY_PRESS:
                SET     _DATA_BUF[5]
                MOV     A,BANK _KEY_STATUS
                MOV     BP,A
                MOV     A,OFFSET _KEY_STATUS
                ADD     A,CHANNEL_INDEX
                MOV     MP1,A
                
                SNZ     _DATA_BUF[5].0
                CLR     IAR1
                SNZ     _DATA_BUF[5].0
                RET
                
                INC     IAR1
                
                SZ      IAR1
                INC     KEY_DBCE
                INCA    IAR1
                SZ      IAR1.2
                SET     KEY_DBCE
                RET
                
HALT_SAMPLING:
                _SETB   TKC0,5  ; TKST
                CLR     TKMF
                SZ      _HALT_STATE.0
                HALT
        TKRCOV_LOOP:
                _SNZ    TKC0,6  ;TKRCOV
                JMP     TKRCOV_LOOP
                
                MOV     A,HIGH (NormalSensSampling>>PowerSaveSamplingLength-BalanceCentralPoint)
                SZ      _GLOBE_VARIES[TKS_OPTIONB].SENS_LEVEL
                MOV     A,HIGH (HighSensSampling>>PowerSaveSamplingLength-BalanceCentralPoint)
                MOV     MP1,A
                ;--
                MOV     A,LOW (NormalSensSampling>>PowerSaveSamplingLength-BalanceCentralPoint)
                SZ      _GLOBE_VARIES[TKS_OPTIONB].SENS_LEVEL
                MOV     A,LOW (HighSensSampling>>PowerSaveSamplingLength-BalanceCentralPoint)
                JMP     _GetSampleWindowLimit_RET
                
               
HALT_SAVE_DATA:
                MOV     A,TKM_BUF[0]
                CALL    TKTMR_RESTORE
                
        if      KeyAmount > 4           ;KEY 5 ~ 8
                MOV     A,TKM_BUF[1]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
        if      KeyAmount > 8           ;KEY 9 ~ 12
                MOV     A,TKM_BUF[2]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
        if      KeyAmount > 12           ;KEY 13 ~ 16
                MOV     A,TKM_BUF[3]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
        if      KeyAmount > 16           ;KEY 17 ~ 20
                MOV     A,TKM_BUF[4]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
        if      KeyAmount > 20           ;KEY 21 ~ 24
                MOV     A,TKM_BUF[5]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
        if      KeyAmount > 24           ;KEY 25 ~ 28
                MOV     A,TKM_BUF[6]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
        if      KeyAmount > 28           ;KEY 29 ~ 32
                MOV     A,TKM_BUF[7]
                CALL    TKTMR_RESTORE
        endif   ;------------------------
                _CLR    TKC0
                
                RET
                
    TKTMR_RESTORE:
    
    if PowerSaveSamplingLength == 2
                SUB     A,96
                SNZ     C
                CLR     ACC     ;<96
                
                SZ      ACC.7   ;BIT7 = 1
                SET     ACC
                RL      ACC
                
                SZ      ACC.7   ;BIT6 = 1
                SET     ACC
                RL      ACC
                AND     A,11111100B
                MOV     IAR1,A
    elseif  PowerSaveSamplingLength == 1
                SUB     A,64
                SNZ     C
                CLR     ACC     ;<64
                
                SZ      ACC.7   ;BIT7 = 1
                SET     ACC
                RL      ACC
                
                AND     A,11111110B
                MOV     IAR1,A
    elseif  PowerSaveSamplingLength == 0
                MOV     IAR1,A
    endif
    
                MOV     A,4*4
                ADDM    A,MP1
                RET          
                
                
KEY_WAKEUP:
                CLR      _HALT_STATE
                RET    
               
KEY_HALT:       
                CLR      _HALT_STATE.7
else
    HALT_SAVE_DATA:
    HALT_SAMPLING:
    
endif 
                RET    

;;;;;//---------------------------------------------------------------------------------
;;;;;*/

;;;;;/**
;;;;;  * @}
;;;;;  */
;;;;;/* ==================================================================================================================================================*/











